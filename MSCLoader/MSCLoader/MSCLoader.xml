<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSCLoader</name>
    </assembly>
    <members>
        <member name="T:MSCLoader.ModAudio">
            <summary>
            Audio library (play local *.mp3, *.ogg, *.wav, *.aiff)
            </summary>
        </member>
        <member name="F:MSCLoader.ModAudio.audioSource">
            <summary>
            Your AudioSource goes here
            </summary>
        </member>
        <member name="M:MSCLoader.ModAudio.LoadAudioFromFile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Load audio from file
            </summary>
            <param name="path">Full path to audio file</param>
            <param name="doStream">Stream from HDD instead of loading to memory (recommended)</param>
            <param name="background">Load file in background</param>
        </member>
        <member name="M:MSCLoader.ModAudio.Time">
            <summary>
            Get current time position of audio file
            </summary>
            <returns>Time in TimeSpan format</returns>
        </member>
        <member name="M:MSCLoader.ModAudio.TotalTime">
            <summary>
            Get total time of audio file
            </summary>
            <returns>Time in TimeSpan format</returns>
        </member>
        <member name="M:MSCLoader.ModAudio.Play(System.Single,System.Single)">
            <summary>
            Play loaded audio file from specifed time.
            </summary>
            <param name="time">time to start</param>
            <param name="delay">optional delay</param>
        </member>
        <member name="M:MSCLoader.ModAudio.Play">
            <summary>
            Play loaded audio file
            </summary>
        </member>
        <member name="M:MSCLoader.ModAudio.Stop">
            <summary>
            Stop playing audio file
            </summary>
        </member>
        <member name="T:MSCLoader.Playlists">
            <summary>
            Parse playlists files
            </summary>
        </member>
        <member name="M:MSCLoader.Playlists.plsPlaylist(System.String)">
            <summary>
            Parse *.pls playlist file and return List of paths
            </summary>
            <param name="path">Path to *.pls file</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.plsPlaylist(System.IO.Stream)">
            <summary>
            Parse *.pls playlist file and return List of paths
            </summary>
            <param name="stream">File stream</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.m3uPlaylist(System.String)">
            <summary>
            Parse *.m3u and *.m3u8 playlist files and return List of paths
            </summary>
            <param name="path">Path to .m3u or *.m3u8 file</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.m3uPlaylist(System.IO.Stream)">
            <summary>
            Parse *.m3u and *.m3u8 playlist files and return List of paths
            </summary>
            <param name="stream">File stream</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="T:MSCLoader.ModAssets">
            <summary>Holder class for all things related to asset loading.</summary>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadBundle(System.Byte[])">
            <summary>Loads an AssetBundle from a specified byte Array</summary>
            <param name="bundleBytes">byte array to load.</param>
            <returns>Loaded AssetBundle</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadBundle(System.String)">
            <summary>Loads an AssetBundle from a specified path.</summary>
            <param name="filePath">File path to bundle.</param>
            <returns>Loaded AssetBundle</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadBundle(MSCLoader.Mod,System.String)">
            <summary>Loads an AssetBundle from the mod's Asset folder by name</summary>
            <param name="mod">Mod to load the AssetBundle from.</param>
            <param name="bundleName">File name of the bundle.</param>
            <returns>Loaded AssetBundle</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadTexture(System.String,System.Boolean)">
            <summary>Loads a Texture2D at the specified path, supported types: .jpg, .png, .dds, .tga</summary>
            <param name="filePath">Path to file.</param>
            <param name="normalMap">(Optional) Should it be converted into a normal map?</param>
            <returns>Loaded Texture2D</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadTexture(MSCLoader.Mod,System.String,System.Boolean)">
            <summary>Loads a Texture2D at the specified path, supported types: .jpg, .png, .dds, .tga</summary>
            <param name="mod">Mod which asset folder to look in.</param>
            <param name="textureName">Name of the texture.</param>
            <param name="normalMap">(Optional) Should it be converted into a normal map?</param>
            <returns>Loaded Texture2D</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadTexturePNG(System.String,System.Boolean)">
            <summary>Loads a PNG image as a Texture2D.</summary>
            <param name="filePath">Path to image file.</param>
            <param name="normalMap">Is it a normal map?</param>
            <returns>Loaded Texture2D.</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadTextureJPG(System.String,System.Boolean)">
            <summary>Loads a JPG image as a Texture2D.</summary>
            <param name="filePath">Path to image file.</param>
            <param name="normalMap">Is it a normal map?</param>
            <returns>Loaded Texture2D.</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadTextureDDS(System.String,System.Boolean)">
            <summary>Loads a DDS image as a Texture2D.</summary>
            <param name="filePath">Path to image file.</param>
            <param name="normalMap">Is it a normal map?</param>
            <returns>Loaded Texture2D.</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadTextureTGA(System.String,System.Boolean)">
            <summary>Loads a TGA image as a Texture2D.</summary>
            <param name="filePath">Path to image file.</param>
            <param name="normalMap">Is it a normal map?</param>
            <returns>Loaded Texture2D.</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.ConvertToNormalMap(UnityEngine.Texture2D,System.Boolean)">
            <summary>Convert a texture to a normal map.</summary>
            <param name="texture">Texture2D to convert</param>
            <param name="mipMaps">Generate mipmaps?</param>
            <returns>Converted Texture2D</returns>
        </member>
        <member name="M:MSCLoader.ModAssets.LoadMeshOBJ(System.String)">
            <summary>Loads an OBJ model file as a Mesh.</summary>
            <param name="filePath">Path to model file.</param>
            <returns>Loaded Mesh.</returns>
        </member>
        <member name="T:MSCLoader.ModConfig">
            <summary>Holder class for easy saving of settings to a file.</summary>
        </member>
        <member name="F:MSCLoader.ModConfig.Enabled">
            <summary>Whether or not the mod is enabled.</summary>
        </member>
        <member name="F:MSCLoader.ModConfig.Keybinds">
            <summary>Saved keybinds</summary>
        </member>
        <member name="F:MSCLoader.ModConfig.Numbers">
            <summary>Saved numbers</summary>
        </member>
        <member name="F:MSCLoader.ModConfig.Booleans">
            <summary>Saved booleans</summary>
        </member>
        <member name="F:MSCLoader.ModConfig.Strings">
            <summary>Saved strings</summary>
        </member>
        <member name="T:MSCLoader.ModEarlyAccess">
            <summary>Class containing useful features pertaining to Early Access for mods.</summary>
        </member>
        <member name="M:MSCLoader.ModEarlyAccess.CheckDateAndDisable(MSCLoader.Mod,System.String,System.String,System.String,System.Boolean)">
            <summary> Checks the current date and disables the mod if the date is outside specified date interval. </summary>
            <param name="mod">Mod in question.</param>
            <param name="startDate">Starting date of the interval.</param>
            <param name="endDate">End date of the interval.</param>
            <param name="disableMessage">Message to show the user if outside the date interval.</param>
            <param name="onlineTimeOnly">Check online time only.</param>
        </member>
        <member name="M:MSCLoader.ModEarlyAccess.CheckDate(System.String,System.String,System.Boolean)">
            <summary> Check if the current date is outside the specified date interval</summary>
            <param name="startDate">Starting date of the interval.</param>
            <param name="endDate">End date of the interval.</param>
            <param name="onlineTimeOnly">Check online time only.</param>
            <returns>Whether or not the current date is outside the specified date interval.</returns>
        </member>
        <member name="M:MSCLoader.ModEarlyAccess.DisableMod(MSCLoader.Mod,System.String)">
            <summary> Disables a mod completely, hiding it from the mod list.</summary>
            <param name="mod">Mod in question.</param>
            <param name="disableMessage">Message to show the user.</param>
        </member>
        <member name="M:MSCLoader.ModEarlyAccess.GetDate">
            <summary> Get the current date, online with offline backup.</summary>
            <returns>The current date.</returns>
        </member>
        <member name="M:MSCLoader.ModEarlyAccess.GetOnlineDate">
            <summary> Get the current date, online.</summary>
            <returns>The current date.</returns>
        </member>
        <member name="T:MSCLoader.Helper.ModHelper">
            <summary> Container for useful helper methods </summary>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.MakePickable(UnityEngine.GameObject,System.Boolean)">
            <summary>Make the provided GameObject interactable as a object you can pick up ingame.</summary>
            <param name="gameObject">GameObject to make pickable</param>
            <param name="includeTag">Should the tag also be changed? The tag is what makes the player able to interact with the object, whereas the layer only make its name show up as a subtitle.</param>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.MakePickable(UnityEngine.Transform,System.Boolean)">
            <summary>Make the provided Transform interactable as a object you can pick up ingame.</summary>
            <param name="transform">Transform to make pickable</param>
            <param name="includeTag">Should the tag also be changed? The tag is what makes the player able to interact with the object, whereas the layer only make its name show up as a subtitle.</param>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.GetTransform(System.String,System.String)">
            <summary>Get a Transform child.</summary>
            <param name="parentPath">Hierarchy path to a parent Transform.</param>
            <param name="childPath">Hierarchy path from the parent to the wanted child Transform.</param>
            <returns>Transform with specified path.</returns>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.GetGameObject(System.String,System.String)">
            <summary>Get a GameObject child.</summary>
            <param name="parentPath">Hierarchy path to a parent GameObject.</param>
            <param name="childPath">Hierarchy path from the parent to the wanted child GameObject.</param>
            <returns>GameObject with specified path.</returns>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.PlaySound3D(UnityEngine.Transform,System.String,System.String,System.Single,System.Single)">
            <summary>Play a MasterAudio sound from the Transform.</summary>
            <param name="transform">Transform to play the sound from.</param>
            <param name="type">Type of sound.</param>
            <param name="variation">Variation of sound.</param>
            <param name="volume">(Optional) Sound volume.</param>
            <param name="pitch">(Optional) Sound pitch.</param>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.PlaySound3D(UnityEngine.Vector3,System.String,System.String,System.Single,System.Single)">
            <summary>Play a MasterAudio sound from a Vector3 world position.</summary>
            <param name="vector3">Vector3 to play the sound from.</param>
            <param name="type">Type of sound.</param>
            <param name="variation">Variation of sound.</param>
            <param name="volume">(Optional) Sound volume.</param>
            <param name="pitch">(Optional) Sound pitch.</param>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.SelectRandom``1(System.Collections.Generic.IList{``0})">
            <summary>Select a random element from a List or an Array.</summary>
            <typeparam name="T">List/Array Element type.</typeparam>
            <param name="list">List/Array to get a random element from.</param>
            <returns></returns>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.InLayerMask(UnityEngine.LayerMask,System.Int32)">
            <summary>Check if a specified layer is in the LayerMask.</summary>
            <param name="layerMask">LayerMask to check.</param>
            <param name="layer">Layer number to check for.</param>
            <returns>Whether or not the layer is in the </returns>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.InLayerMask(UnityEngine.LayerMask,System.String)">
            <summary>Check if a specified layer is in the LayerMask.</summary>
            <param name="layerMask">LayerMask to check.</param>
            <param name="layer">Layer name to check for.</param>
            <returns>Whether or not the layer is in the </returns>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.SetParent(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.String)">
            <summary>Extension of SetParent, with this you can specify the new position, rotation, scale and name of the transform.</summary>
            <param name="transform">Transform to change parent of.</param>
            <param name="parent">New parent Transform.</param>
            <param name="position">New local position.</param>
            <param name="rotation">New local rotation (Euler Angles).</param>
            <param name="scale">New local scale.</param>
            <param name="name">(Optional) New name.</param>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.OpenFolder(System.String)">
            <summary>Open folder in Explorer or file in its default app.</summary>
            <param name="path">Path to folder/file.</param>
        </member>
        <member name="M:MSCLoader.Helper.ModHelper.OpenWebsite(System.String)">
            <summary>Open Website URL.</summary>
            <param name="url">Website URL.</param>
        </member>
        <member name="T:MSCLoader.Helper.PlayMakerHelper">
            <summary>Container for PlayMaker related helper and extension methods.</summary>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetPlayMakerFSM(UnityEngine.GameObject,System.String)">
            <summary>Get a PlayMakerFSM by name on the GameObject.</summary>
            <param name="gameObject">The GameObject to look for the FSM on.</param>
            <param name="fsmName">Name of the FSM.</param>
            <returns>PlayMakerFSM of specified name, or null if it can't be found.</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetPlayMakerFSM(UnityEngine.Transform,System.String)">
            <summary>Get a PlayMakerFSM by name on the Transform's GameObject.</summary>
            <param name="transform">The Transform to look for the FSM on.</param>
            <param name="fsmName">Name of the FSM.</param>
            <returns>PlayMakerFSM of specified name, or null if it can't be found.</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetState(PlayMakerFSM,System.String)">
            <summary>Get a state on the PlayMakerFSM.</summary>
            <param name="fsm">PlayMakerFSM to search on.</param>
            <param name="stateName">Name of the state to look for.</param>
            <returns>FsmState of specified name.</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetState(PlayMakerFSM,System.Int32)">
            <summary>Get a state on the PlayMakerFSM.</summary>
            <param name="fsm">PlayMakerFSM to search on.</param>
            <param name="stateIndex">Index of the state to look for.</param>
            <returns>FsmState of specified index.</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetAction``1(HutongGames.PlayMaker.FsmState,System.Int32)">
            <summary>Get a PlayMaker FSMStateAction of specified type in the specified state.</summary>
            <typeparam name="T">PlayMaker Action Type, must be of type FSMStateAction or sub-class</typeparam>
            <param name="state">State that contains the action</param>
            <param name="actionIndex">The index of the Actions Array in the FSMState.</param>
            <returns>FSMStateAction of type T</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetAction``1(PlayMakerFSM,System.String,System.Int32)">
            <summary>Get a PlayMaker FSMStateAction of specified type in the specified state.</summary>
            <typeparam name="T">PlayMaker Action Type, must be of type FSMStateAction or sub-class</typeparam>
            <param name="fsm">PlayMakerFSM to get the action from.</param>
            <param name="stateName">Name of the state that contains the action</param>
            <param name="actionIndex">The index of the Actions Array in the FSMState.</param>
            <returns>FSMStateAction of type T</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetAction``1(PlayMakerFSM,System.Int32,System.Int32)">
            <summary>Get a PlayMaker FSMStateAction of specified type in the specified state.</summary>
            <typeparam name="T">PlayMaker Action Type, must be of type FSMStateAction or sub-class</typeparam>
            <param name="fsm">PlayMakerFSM to get the action from.</param>
            <param name="stateIndex">Index of the state that contains the action</param>
            <param name="actionIndex">The index of the Actions Array in the FSMState.</param>
            <returns>FSMStateAction of type T</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.InsertAction(HutongGames.PlayMaker.FsmState,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Insert an action into the state.</summary>
            <param name="state">State to insert the action to.</param>
            <param name="actionIndex">The index the action should be inserted to.</param>
            <param name="action">The action that will be inserted.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.InsertAction(PlayMakerFSM,System.String,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Insert an action into the state.</summary>
            <param name="fsm">PlayMakerFSM to insert the action to.</param>
            <param name="stateName">Name of the state to insert the action to.</param>
            <param name="actionIndex">The index the action should be inserted to.</param>
            <param name="action">The action that will be inserted.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.InsertAction(PlayMakerFSM,System.Int32,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Insert an action into the state.</summary>
            <param name="fsm">PlayMakerFSM to insert the action to.</param>
            <param name="stateIndex">Index of the state to insert the action to.</param>
            <param name="actionIndex">The index the action should be inserted to.</param>
            <param name="action">The action that will be inserted.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.AddAction(HutongGames.PlayMaker.FsmState,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Add an action the state.</summary>
            <param name="state">State to add the action to.</param>
            <param name="action">The action that will be added.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.AddAction(PlayMakerFSM,System.String,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Add an action the state.</summary>
            <param name="fsm">PlayMakerFSM to add the action to.</param>
            <param name="stateName">Name of the state to add the action to</param>
            <param name="action">The action that will be added.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.AddAction(PlayMakerFSM,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Add an action the state.</summary>
            <param name="fsm">PlayMakerFSM to add the action to.</param>
            <param name="stateIndex">Index of the state to add the action to</param>
            <param name="action">The action that will be added.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.ReplaceAction(HutongGames.PlayMaker.FsmState,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Replaces an action in the specified state.</summary>
            <param name="state">State to replace the action in.</param>
            <param name="actionIndex">Index of the action to replace.</param>
            <param name="action">The replacement action.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.ReplaceAction(PlayMakerFSM,System.String,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Replaces an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to replace the action on.</param>
            <param name="stateName">Name of the state to replace the action in.</param>
            <param name="actionIndex">Index of the action to replace.</param>
            <param name="action">The replacement action.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.ReplaceAction(PlayMakerFSM,System.Int32,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Replaces an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to replace the action on.</param>
            <param name="stateIndex">Index of the state to replace the action in.</param>
            <param name="actionIndex">Index of the action to replace.</param>
            <param name="action">The replacement action.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.RemoveAction(HutongGames.PlayMaker.FsmState,System.Int32)">
            <summary>Removes an action in the specified state.</summary>
            <param name="state">State to remove the action in.</param>
            <param name="actionIndex">Index of the action to remove.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.RemoveAction(HutongGames.PlayMaker.FsmState,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Removes an action in the specified state.</summary>
            <param name="state">State to remove the action in.</param>
            <param name="action">Action to remove.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.RemoveAction(PlayMakerFSM,System.String,System.Int32)">
            <summary>Removes an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to remove an action on.</param>
            <param name="stateName">Name of the state to remove the action in.</param>
            <param name="actionIndex">Index of the action to remove.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.RemoveAction(PlayMakerFSM,System.Int32,System.Int32)">
            <summary>Removes an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to remove an action on.</param>
            <param name="stateIndex">Index of the state to remove the action in.</param>
            <param name="actionIndex">Index of the action to remove.</param>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetVariable``1(PlayMakerFSM,System.String)">
            <summary>Get a variable of specified type and name.</summary>
            <typeparam name="T">Type of variable to get. NamedVariable or sub-class (Standard PlayMaker Variable types)</typeparam>
            <param name="fsm">PlayMakerFSM that contains the variable.</param>
            <param name="name">Name of the variable to find.</param>
            <returns>PlayMaker variable of specified type T</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.GetGlobalVariable``1(System.String)">
            <summary>Get a global PlayMaker variable of specified type and name.</summary>
            <typeparam name="T">Type of variable to get. NamedVariable or sub-class (Standard PlayMaker Variable types)</typeparam>
            <param name="name">Name of the variable to find.</param>
            <returns>PlayMaker variable of specified type T</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.FindVariable``1(HutongGames.PlayMaker.FsmVariables,System.String)">
            <summary>Get a variable of specified type and name.</summary>
            <typeparam name="T">Type of variable to get. NamedVariable or sub-class (Standard PlayMaker Variable types)</typeparam>
            <param name="variables">Variables to search.</param>
            <param name="name">Name of the variable to find.</param>
            <returns>PlayMaker variable of specified type T</returns>
        </member>
        <member name="M:MSCLoader.Helper.PlayMakerHelper.Initialize(PlayMakerFSM)">
            <summary>Initialize a PlayMakerFSM to enable editing states.</summary>
            <param name="fsm">PlayMakerFSM to initialize.</param>
        </member>
        <member name="T:MSCLoader.Helper.CallAction">
            <summary>FsmStateAction that executes an Action.</summary>
        </member>
        <member name="M:MSCLoader.Helper.CallAction.#ctor(System.Action)">
            <summary>Create a new FsmStateAction that executes provided Action.</summary>
            <param name="action">Action to call when state executes the FsmStateAction.</param>
        </member>
        <member name="T:MSCLoader.Helper.PlayMakerProxyHelper">
            <summary>Helper Methods to work with PlayMakerArrayListProxy and PlayMakerHashTableProxy components.<br></br><br></br>Courtesy of BrennFuchS.</summary>
        </member>
        <member name="T:MSCLoader.Mod">
            <summary> Main Mod Class, parent class for all mods. </summary>
        </member>
        <member name="P:MSCLoader.Mod.Enabled">
            <summary>Determines whether or not the mod is enabled.</summary>
        </member>
        <member name="P:MSCLoader.Mod.ID">
            <summary>The mod's ID, used for identification. Has to be unique!</summary>
        </member>
        <member name="P:MSCLoader.Mod.Name">
            <summary>The mod's name, shown in lists etc.</summary>
        </member>
        <member name="P:MSCLoader.Mod.Author">
            <summary>Who made the mod? You, presumably!</summary>
        </member>
        <member name="P:MSCLoader.Mod.Version">
            <summary>Contains the mod version.</summary>
        </member>
        <member name="P:MSCLoader.Mod.Description">
            <summary>A short description of your mod. Displayed in the settings window for the mod, hidden if empty.</summary>
        </member>
        <member name="P:MSCLoader.Mod.Icon">
            <summary>Icon displayed in the mod list, preferably square and not larger than 256x256.</summary>
        </member>
        <member name="P:MSCLoader.Mod.UpdateLink">
            <summary>A link from which ModLoader will check for updates. Must be GitHub or NexusMods, eg. https://github.com/Athlon007/MOP </summary>
        </member>
        <member name="F:MSCLoader.Mod.modListElement">
            <summary> The mod list element for the mod. </summary>
        </member>
        <member name="F:MSCLoader.Mod.modSettings">
            <summary> The settings container for the mod. Used when adding settings. </summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettings">
            <summary> Method for adding settings to the mod. Order of execution: 1 </summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettingsLoaded">
            <summary> Method called when all mods have had their ModSettings() called. Order of execution: 2 </summary>
        </member>
        <member name="M:MSCLoader.Mod.MenuOnLoad">
            <summary> Load Method for anything involving the menu scene. Order of execution: 3 </summary>
        </member>
        <member name="M:MSCLoader.Mod.MenuOnGUI">
            <summary> OnGUI Method for the menu scene. Order of execution: Every frame in menu </summary>
        </member>
        <member name="M:MSCLoader.Mod.MenuUpdate">
            <summary> Update Method for the menu scene. Order of execution: Every fixed time step </summary>
        </member>
        <member name="M:MSCLoader.Mod.MenuFixedUpdate">
            <summary> FixedUpdate Method for the menu scene. Order of execution: Every GUI frame </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnNewGame">
            <summary> Method executed when the player starts a new game, use cases include removing old save files. Order of execution: 4 </summary>
        </member>
        <member name="M:MSCLoader.Mod.PreLoad">
            <summary> Method executed one frame after the game scene loads. Order of execution: 5 </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnLoad">
            <summary> Method executed just when the game has completely finished loading. Order of execution: 6 </summary>
        </member>
        <member name="M:MSCLoader.Mod.PostLoad">
            <summary> Method executed after every mod has executed OnLoad(). Order of execution: 7 </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnSave">
            <summary> Method executed when the player saves the game. Order of execution: 8 </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnGUI">
            <summary> OnGUI method for the game scene. Order of execution: Every GUI frame </summary>
        </member>
        <member name="M:MSCLoader.Mod.Update">
            <summary> Update method for the game scene. Order of execution: Every frame </summary>
        </member>
        <member name="M:MSCLoader.Mod.FixedUpdate">
            <summary> FixedUpdate method for the game scene. Order of execution: Every fixed time step </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnModEnabled">
            <summary>Method called whenever the mod is enabled.</summary>
        </member>
        <member name="M:MSCLoader.Mod.OnModDisabled">
            <summary>Method called whenever the mod is enabled.</summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettingsOpen">
            <summary>Method called whenever mod settings are open.</summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettingsClose">
            <summary>Method called whenever mod settings are closed.</summary>
        </member>
        <member name="T:MSCLoader.ModConsole">
            <summary>The handler for the ModConsole</summary>
        </member>
        <member name="M:MSCLoader.ModConsole.ExecuteCommand(System.String)">
            <summary>
            Execute a command by it's assigned string.
            </summary>
            <param name="commandString"></param>
        </member>
        <member name="M:MSCLoader.ModConsole.Log(System.String)">
            <summary>Logs a string to the ModConsole and output_log.txt.</summary>
            <param name="text">Message to log.</param>
        </member>
        <member name="M:MSCLoader.ModConsole.Log(System.Object)">
            <summary>Logs anything to the ModConsole and output_log.txt.</summary>
            <param name="obj">object to log.</param>
        </member>
        <member name="M:MSCLoader.ModConsole.Log(System.Collections.IList,System.Boolean)">
            <summary>Logs a list (and optionally its elements) to the ModConsole and output_log.txt</summary>
            <param name="list">List to print.</param>
            <param name="printAllElements">(Optional) Should it log all elements of the list/array or should it only log the list/array itself. (default: true)</param>
        </member>
        <member name="M:MSCLoader.ModConsole.LogError(System.String)">
            <summary>Logs a string as an error to the ModConsole and output_log.txt. (Depending on user settings, this might auto-open the console)</summary>
            <param name="text">Message to error log.</param>
        </member>
        <member name="M:MSCLoader.ModConsole.LogWarning(System.String)">
            <summary>Logs a string as a warning to the ModConsole and output_log.txt. (Depending on user settings, this might auto-open the console)</summary>
            <param name="text">Message to warning log.</param>
        </member>
        <member name="T:MSCLoader.CurrentScene">
            <summary> Enumeration of the game's scenes.</summary>
        </member>
        <member name="T:MSCLoader.ModLoader">
            <summary></summary>
        </member>
        <member name="F:MSCLoader.ModLoader.Version">
            <summary> Current Mod Loader Version. </summary>
        </member>
        <member name="P:MSCLoader.ModLoader.LoadedMods">
            <summary> List of Loaded Mods. </summary>
        </member>
        <member name="P:MSCLoader.ModLoader.ModMethods">
            <summary> List of used Mod Class methods. </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.modSceneLoadHandler">
            <summary>Load handler for the UI. Add your GameObject to the extra list if you want your UI to be disabled when the game loads a scene.</summary>
        </member>
        <member name="P:MSCLoader.ModLoader.Date">
            <summary>Get current date.</summary>
        </member>
        <member name="P:MSCLoader.ModLoader.UICanvas">
            <summary>Get the mod loader canvas GameObject.</summary>
        </member>
        <member name="F:MSCLoader.ModLoader.MSCYellow">
            <summary>Yellow Color that MSC uses.</summary>
        </member>
        <member name="F:MSCLoader.ModLoader.MSCRed">
            <summary>Wine Red Color that MSC uses.</summary>
        </member>
        <member name="F:MSCLoader.ModLoader.MSCRose">
            <summary>Rose Color that MSC uses.</summary>
        </member>
        <member name="F:MSCLoader.ModLoader.ModDisabledRed">
            <summary>Red Color for disabled mods.</summary>
        </member>
        <member name="P:MSCLoader.ModLoader.CurrentScene">
            <summary> Get the current game scene. </summary>
        </member>
        <member name="M:MSCLoader.ModLoader.GetModSettingsFolder(MSCLoader.Mod,System.Boolean)">
            <summary>Get the settings folder path for a specific mod.</summary>
            <param name="mod">The mod you want to get the settings folder path for.</param>
            <param name="create">(Optional) Should the folder be created if it doesn't exist?</param>
        </member>
        <member name="M:MSCLoader.ModLoader.GetModAssetsFolder(MSCLoader.Mod,System.Boolean)">
            <summary>Get the asset folder for a specific mod.</summary>
            <param name="mod">The mod you want to get the assets folder path for.</param>
            <param name="create">(Optional) Should the folder be created if it doesn't exist?</param>
        </member>
        <member name="M:MSCLoader.ModLoader.GetMod(System.String,System.Boolean)">
            <summary>Check if the specified mod ID is loaded.</summary>
            <param name="modID">ID of the mod.</param>
            <param name="ignoreEnabled">Ignore whether or not the mod is enabled.</param>
        </member>
        <member name="T:MSCLoader.ModPrompt">
            <summary>ModPrompt Component for a prompt window.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.titleHeader">
            <summary>Title header GameObject.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.titleText">
            <summary>Title UI Text.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.titleShadow">
            <summary>Title UI Text Shadow.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.textHeader">
            <summary>Message header GameObject.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.textText">
            <summary>Message UI Text.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.textShadow">
            <summary>Message UI Text Shadow.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.buttonParent">
            <summary>Button parent Transform.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.buttonPrefab">
            <summary>Button Prefab GameObject.</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.buttons">
            <summary>Button list for all added ModPromptButtons.</summary>
        </member>
        <member name="P:MSCLoader.ModPrompt.DestroyOnDisable">
            <summary>Should the ModPrompt be destroyed after being disabled?</summary>
        </member>
        <member name="F:MSCLoader.ModPrompt.OnCloseAction">
            <summary>UnityAction that executes when the ModPrompt closes.</summary>
        </member>
        <member name="P:MSCLoader.ModPrompt.Title">
            <summary>Title for the ModPrompt.</summary>
        </member>
        <member name="P:MSCLoader.ModPrompt.Text">
            <summary>Text for the ModPrompt.</summary>
        </member>
        <member name="M:MSCLoader.ModPrompt.AddButton(System.String,UnityEngine.Events.UnityAction)">
            <summary>Adds a button to the mod prompt with the specified text and action when clicked.</summary>
            <param name="buttonText">Text displayed on the button.</param>
            <param name="action">UnityAction to be executed when the button is clicked.</param>
            <returns>The added ModPromptButton</returns>
        </member>
        <member name="M:MSCLoader.ModPrompt.OnEnable">
            <summary>Show the ModPrompt</summary>
        </member>
        <member name="M:MSCLoader.ModPrompt.CreatePrompt(System.String,System.String,UnityEngine.Events.UnityAction)">
            <summary> Creates a prompt with "OK" button. </summary>
            <param name="message">A message that will appear in the prompt.</param>
            <param name="title">Title of the prompt.</param>
            <param name="onPromptClose">(Optional) Action that will happen after the window gets closed - regardless of player's choice.</param>
            <returns>Returns a ModPrompt component of the button. Can be</returns>
        </member>
        <member name="M:MSCLoader.ModPrompt.CreateYesNoPrompt(System.String,System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction)">
            <summary> Creates a prompt with "Yes" and "No" buttons. </summary>
            <param name="message">A message that will appear in the prompt.</param>
            <param name="title">Title of the prompt.</param>
            <param name="onYes">Action that will happen after player clicks Yes button.</param>
            <param name="onNo">(Optional) Action that will happen after player clicks No button.</param>
            <param name="onPromptClose">(Optional) Action that will happen after the window gets closed - regardless of player's choice.</param>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="M:MSCLoader.ModPrompt.CreateRetryCancelPrompt(System.String,System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction)">
            <summary>Creates a prompt with "Retry" and "Cancel" buttons.</summary>
            <param name="message">A message that will appear in the prompt.</param>
            <param name="title">Title of the prompt.</param>
            <param name="onRetry">Action that will happen after player clicks Retry button.</param>
            <param name="onCancel">(Optional) Action that will happen after player clicks Cancel button.</param>
            <param name="onPromptClose">(Optional) Action that will happen after the window gets closed - regardless of player's choice.</param>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="M:MSCLoader.ModPrompt.CreateContinueAbortPrompt(System.String,System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction)">
            <summary>Creates a prompt with "Continue" and "Abort" buttons</summary>
            <param name="message">A message that will appear in the prompt.</param>
            <param name="title">Title of the prompt.</param>
            <param name="onContinue">Action that will happen after player clicks Continue button.</param>
            <param name="onAbort">(Optional) Action that will happen after player clicks Abort button.</param>
            <param name="onPromptClose">(Optional) Action that will happen after the window gets closed - regardless of player's choice.</param>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="M:MSCLoader.ModPrompt.CreateCustomPrompt">
            <summary>
            Creates a prompt that can be fully customized. You can add any buttons you like.<br></br>
            Custom prompts have to be showed manually using <b>ModPrompt.Show()</b>!
            </summary>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="M:MSCLoader.ModPrompt.CreateButtonlessPrompt">
            <summary>
            Makes a prompt without buttons (for internal use only!)<br></br>
            </summary>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="T:MSCLoader.ModPromptButton">
            <summary>ModPromptButton Component for buttons added the prompts.</summary>
        </member>
        <member name="F:MSCLoader.ModPromptButton.prompt">
            <summary>Parent ModPrompt</summary>
        </member>
        <member name="F:MSCLoader.ModPromptButton.button">
            <summary>UI Button Component</summary>
        </member>
        <member name="F:MSCLoader.ModPromptButton.buttonText">
            <summary>Button UI Text</summary>
        </member>
        <member name="F:MSCLoader.ModPromptButton.buttonShadow">
            <summary>Button UI Text Shadow</summary>
        </member>
        <member name="P:MSCLoader.ModPromptButton.Text">
            <summary>Text displayed on the button.</summary>
        </member>
        <member name="P:MSCLoader.ModPromptButton.OnClick">
            <summary>Eventholder for the button click</summary>
        </member>
        <member name="M:MSCLoader.ModPromptButton.ClickDisable">
            <summary>When the button is clicked, disable the prompt.</summary>
        </member>
        <member name="T:MSCLoader.ModSave">
            <summary>Container class for all things saving!</summary>
        </member>
        <member name="M:MSCLoader.ModSave.Save``1(System.String,``0,System.String)">
            <summary>Saves a class (T) into an XML file of the specified name.</summary>
            <typeparam name="T">Class to save</typeparam>
            <param name="fileName">Name of the save file. (excluding extension)</param>
            <param name="data">Class to save.</param>
            <param name="encryptionKey">(Optional) Key for the save encryption.</param>
        </member>
        <member name="M:MSCLoader.ModSave.Load``1(System.String,System.String)">
            <summary>Loads a save file with the specified name.</summary>
            <typeparam name="T">Class to load.</typeparam>
            <param name="fileName">Name of the save file. (excluding extension)</param>
            <param name="encryptionKey">(Optional) Key for the save encryption.</param>
            <returns>Loaded save class (T).</returns>
        </member>
        <member name="M:MSCLoader.ModSave.Delete(System.String)">
            <summary>Deletes a save file of the specified name.</summary>
            <param name="fileName">Name of the save file. (excluding extension)</param>
        </member>
        <member name="T:MSCLoader.ModContainer">
            <summary>Handler for all the mod windows.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.modLoader">
            <summary>ModLoader class instance.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.settingsDictionary">
            <summary>Dictionary containing all mods' ModSettings Components.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.modListDictionary">
            <summary>Dictionary containing all mods' ModListElement Components.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.modCountText">
            <summary>UI Text for the mod counter.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.modLoaderSettings">
            <summary>Container for the mod loader settings.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.modList">
            <summary>Parent Transform for all mods' list elements.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.modListElementPrefab">
            <summary>Prefab GameObject for a mod list elements.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.settingsList">
            <summary>Parent Transform for all mods' setting lists.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.settingsWindowPrefab">
            <summary>Prefab GameObject for a mod settings window.</summary>
        </member>
        <member name="F:MSCLoader.ModContainer.modUpdater">
            <summary>Component responsible for updating.</summary>
        </member>
        <member name="M:MSCLoader.ModContainer.CreateModListElement(MSCLoader.Mod)">
            <summary>Creates a ModListElement for the specified mod and adds it to the mod list.</summary>
            <param name="mod">Mod to create the ModListElement for.</param>
            <returns>Created ModListElement.</returns>
        </member>
        <member name="M:MSCLoader.ModContainer.CreateModSettingWindow(MSCLoader.Mod)">
            <summary>Creates a ModSettings window for the specified mod.</summary>
            <param name="mod">Mod to create the ModSettings window for.</param>
            <returns>Created ModSettings.</returns>
        </member>
        <member name="M:MSCLoader.ModContainer.UpdateModCountText">
            <summary>Updates the mod count text to reflect the current number of mods and how many of them are disabled or has an update available.</summary>
        </member>
        <member name="T:MSCLoader.ModListElement">
            <summary>Control Component for the mod list elements.</summary>
        </member>
        <member name="F:MSCLoader.ModListElement.mod">
            <summary>The mod this ModListElement belongs to.</summary>
        </member>
        <member name="F:MSCLoader.ModListElement.modSettings">
            <summary>The ModSettings this ModListElement is linked to.</summary>
        </member>
        <member name="P:MSCLoader.ModListElement.ID">
            <summary>ID for the ModListElement, gets/sets the name of the GameObject the list is on.</summary>
        </member>
        <member name="P:MSCLoader.ModListElement.Name">
            <summary>Name of the mod, gets/sets the Name UI Text</summary>
        </member>
        <member name="P:MSCLoader.ModListElement.Author">
            <summary>Author of the mod, gets/sets the Author UI Text</summary>
        </member>
        <member name="P:MSCLoader.ModListElement.Version">
            <summary>Version of the mod, gets/sets the Version UI Text</summary>
        </member>
        <member name="M:MSCLoader.ModListElement.SetModIcon(UnityEngine.Texture2D)">
            <summary>Set the mod's icon to the specified texture.</summary>
            <param name="icon">Texture to use as the icon for the mod.</param>
        </member>
        <member name="M:MSCLoader.ModListElement.ToggleSettingsOpen">
            <summary>Opens the mod's settings window while closing all others.</summary>
        </member>
        <member name="M:MSCLoader.ModListElement.SetSettingsOpen(System.Boolean,System.Boolean)">
            <summary>Open/Close the mod's settings window</summary>
        </member>
        <member name="M:MSCLoader.ModListElement.ToggleModEnabled">
            <summary>Toggle the mod's enabled state.</summary>
        </member>
        <member name="M:MSCLoader.ModListElement.SetModEnabled(System.Boolean,System.Boolean)">
            <summary>Set the enabled status of the mod.</summary>
            <param name="enabled">Enabled/disabled</param>
            <param name="callMethods">Call OnModEnabled/Disabled</param>
        </member>
        <member name="T:MSCLoader.ModSettings">
            <summary>Control Component for the mod settings.</summary>
        </member>
        <member name="F:MSCLoader.ModSettings.mod">
            <summary>The mod this ModListElement belongs to.</summary>
        </member>
        <member name="F:MSCLoader.ModSettings.settingsList">
            <summary>Parent Transform for all added settings.</summary>
        </member>
        <member name="F:MSCLoader.ModSettings.settings">
            <summary>List of added settings.</summary>
        </member>
        <member name="F:MSCLoader.ModSettings.loadedSettings">
            <summary>Setting values loaded from file.</summary>
        </member>
        <member name="P:MSCLoader.ModSettings.Name">
            <summary>Get/Set the Name UI Text</summary>
        </member>
        <member name="P:MSCLoader.ModSettings.ID">
            <summary>Get/Set the ID UI Text, also sets the GameObject name to the ID value.</summary>
        </member>
        <member name="P:MSCLoader.ModSettings.Description">
            <summary>Get/Set the description UI Text, if set to an empty string it hides the UI element.</summary>
        </member>
        <member name="M:MSCLoader.ModSettings.AddButton(System.String,System.String,System.String,UnityEngine.Events.UnityAction,System.Boolean)">
            <summary>Adds a button to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="buttonText">Text to display on the button.</param>
            <param name="name">(Optional) Name of the setting, if empty the button will take up the whole space available.</param>
            <param name="action">(Optional) UnityAction to execute when clicking the button.</param>
            <param name="blockSuspension">(Optional) Should the provided action be disabled if/when actions are disabled on the setting?</param>
            <returns>Added SettingButton</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddButton(System.String,System.String,UnityEngine.Events.UnityAction,System.Boolean)">
            <summary>Adds a button to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="buttonText">Text to display on the button.</param>
            <param name="action">UnityAction to execute when clicking the button.</param>
            <param name="blockSuspension">(Optional) Should the provided action be disabled if/when actions are disabled on the setting?</param>
            <returns>Added SettingButton</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddHeader(System.String)">
            <summary>Adds a header to the settings list.</summary>
            <param name="text">Text to display on the header.</param>
            <returns>Added SettingHeader.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddHeader(System.String,UnityEngine.Color)">
            <summary>Adds a header to the settings list.</summary>
            <param name="text">Text to display on the header.</param>
            <param name="backgroundColor">Color of the background.</param>
            <returns>Added SettingHeader.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddHeader(System.String,UnityEngine.Color,UnityEngine.Color)">
            <summary>Adds a header to the settings list.</summary>
            <param name="text">Text to display on the header.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="textColor">Color of the text.</param>
            <returns>Added SettingHeader.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddHeader(System.String,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>Adds a header to the settings list.</summary>
            <param name="text">Text to display on the header.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="textColor">Color of the text.</param>
            <param name="outlineColor">Color of the Outline.</param>
            <returns>Added SettingHeader.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddKeybind(System.String,System.String,UnityEngine.KeyCode,UnityEngine.KeyCode[])">
            <summary>Adds a keybind to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="key">Default keycode of the main key.</param>
            <param name="modifiers">Keycodes for the default modifiers required to be pressed along with the main key.</param>
            <returns>Added SettingKeybind.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddRadioButtons(System.String,System.String,System.Int32,System.String[])">
            <summary>Adds radio buttons to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value</param>
            <param name="options">Array of buttons, by name, available.</param>
            <returns>Added SettingRadioButtons.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddRadioButtons(System.String,System.String,System.Int32,UnityEngine.Events.UnityAction{System.Int32},System.String[])">
            <summary>Adds radio buttons to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="action">Action called whenever the value changes. Parameter passes the changed value of the setting.</param>
            <param name="options">Array of buttons, by name, available.</param>
            <returns>Added SettingRadioButtons.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddRadioButtons(System.String,System.String,System.Int32,UnityEngine.Events.UnityAction,System.String[])">
            <summary>Adds radio buttons to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="action">Action called whenever the value changes.</param>
            <param name="options">Array of buttons, by name, available.</param>
            <returns>Added SettingRadioButtons.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Single,System.Single,System.Single,System.Int32)">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <param name="roundDigits">(Optional) The amount of decimals to round to, -1 disables rounding.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Single,System.Single,System.Single,System.Int32,UnityEngine.Events.UnityAction{System.Single})">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <param name="roundDigits">(Optional) The amount of decimals to round to, -1 disables rounding.</param>
            <param name="action">(Optional) Action to call when the slider value is changed.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Single,System.Single,System.Single,System.Int32,UnityEngine.Events.UnityAction)">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <param name="roundDigits">(Optional) The amount of decimals to round to, -1 disables rounding.</param>
            <param name="action">(Optional) Action to call when the slider value is changed.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Single,System.Single,System.Single,UnityEngine.Events.UnityAction{System.Single})">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <param name="action">(Optional) Action to call when the slider value is changed.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Single,System.Single,System.Single,UnityEngine.Events.UnityAction)">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <param name="action">(Optional) Action to call when the slider value is changed.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Events.UnityAction{System.Single})">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <param name="action">(Optional) Action to call when the slider value is changed.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSlider(System.String,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Events.UnityAction)">
            <summary>Adds a slider to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="minValue">Minimum value of the slider.</param>
            <param name="maxValue">Maximum value of the slider.</param>
            <param name="action">(Optional) Action to call when the slider value is changed.</param>
            <returns>Added SettingSlider.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddSpacer(System.Single)">
            <summary>Adds an empty space of configurable height to the settings list.</summary>
            <param name="height">Height of the spacer.</param>
            <returns>Added SettingSpacer.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddText(System.String)">
            <summary>Adds a non-interactable text to the settings list.</summary>
            <param name="text">Text to display.</param>
            <returns>Added SettingText.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddText(System.String,UnityEngine.Color)">
            <summary>Adds a non-interactable text to the settings list.</summary>
            <param name="text">Text to display.</param>
            <param name="backgroundColor">Color of the text background.</param>
            <returns>Added SettingText.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddText(System.String,UnityEngine.Color,UnityEngine.Color)">
            <summary>Adds a non-interactable text to the settings list.</summary>
            <param name="text">Text to display.</param>
            <param name="backgroundColor">Color of the text background.</param>
            <param name="textColor">Color of the text.</param>
            <returns>Added SettingText.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddText(System.String,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>Adds a non-interactable text to the settings list.</summary>
            <param name="text">Text to display.</param>
            <param name="backgroundColor">Color of the text background.</param>
            <param name="textColor">Color of the text.</param>
            <param name="outlineColor">Color of the text background's outline.</param>
            <returns>Added SettingText.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddTextBox(System.String,System.String,System.String,System.String,UnityEngine.UI.InputField.CharacterValidation)">
            <summary>Adds a text box to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="placeholder">(Optional) Text to add as a placeholder.</param>
            <param name="inputType">(Optional) The input type the text box should have, eg. integers, alphanumeric, names etc.</param>
            <returns>Added SettingTextBox.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddTextBox(System.String,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.String,UnityEngine.UI.InputField.CharacterValidation)">
            <summary>Adds a text box to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="action">Action to be called whenever the text input changes.</param>
            <param name="placeholder">(Optional) Text to add as a placeholder.</param>
            <param name="inputType">(Optional) The input type the text box should have, eg. integers, alphanumeric, names etc.</param>
            <returns>Added SettingTextBox.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddTextBox(System.String,System.String,System.String,UnityEngine.Events.UnityAction,System.String,UnityEngine.UI.InputField.CharacterValidation)">
            <summary>Adds a text box to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="action">Action to be called whenever the text input changes.</param>
            <param name="placeholder">(Optional) Text to add as a placeholder.</param>
            <param name="inputType">(Optional) The input type the text box should have, eg. integers, alphanumeric, names etc.</param>
            <returns>Added SettingTextBox.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddToggle(System.String,System.String,System.Boolean)">
            <summary>Adds a toggle to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <returns>Added SettingToggle.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddToggle(System.String,System.String,System.Boolean,UnityEngine.Events.UnityAction{System.Boolean})">
            <summary>Adds a toggle to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="action">Action called whenever the value changes.</param>
            <returns>Added SettingToggle.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddToggle(System.String,System.String,System.Boolean,UnityEngine.Events.UnityAction)">
            <summary>Adds a toggle to the settings list.</summary>
            <param name="id">ID of the setting.</param>
            <param name="name">Name of the setting</param>
            <param name="value">Default value of the setting.</param>
            <param name="action">Action called whenever the value changes.</param>
            <returns>Added SettingToggle.</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddBoolean(System.String,System.Boolean)">
            <summary>Adds a hidden Boolean setting.</summary>
            <param name="id">ID of the setting.</param>
            <param name="value">Default value of the setting.</param>
            <returns>Added SettingBoolean</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddNumber(System.String,System.Single)">
            <summary>Adds a hidden Number setting.</summary>
            <param name="id">ID of the setting.</param>
            <param name="value">Default value of the setting.</param>
            <returns>Added SettingNumber</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddNumber(System.String,System.Int32)">
            <summary>Adds a hidden Number setting.</summary>
            <param name="id">ID of the setting.</param>
            <param name="value">Default value of the setting.</param>
            <returns>Added SettingNumber</returns>
        </member>
        <member name="M:MSCLoader.ModSettings.AddString(System.String,System.String)">
            <summary>Adds a hidden String setting.</summary>
            <param name="id">ID of the setting.</param>
            <param name="value">Default value of the setting.</param>
            <returns>Added SettingNumber</returns>
        </member>
        <member name="M:MSCLoader.ModUpdater.PullMetadata(UnityEngine.Events.UnityAction,System.String[])">
            <summary>
            Arguments:<br></br><br></br>
            1 - Link<br></br>
            2 - (Optional) Nexus Token<br></br>
            </summary>
        </member>
        <member name="M:MSCLoader.ModUpdater.DownloadFile(UnityEngine.Events.UnityAction,System.String[])">
            <summary>
            Arguments:<br></br><br></br>
            1 - Link<br></br>
            2 - Download Path<br></br>
            3 - (Optional) Nexus Token<br></br>
            </summary>
        </member>
        <member name="T:MSCLoader.ModUpdateData">
            <summary> Stores the info about mod update found. </summary>
        </member>
        <member name="T:MSCLoader.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.Changelog">
            <summary>
              Looks up a localized string similar to Version 1.0.8
            Changed the Keybind setting to allow binding the left and right mousebutton.
            Canceling and deleting keybinds is now done by buttons appearing when binding.
            Deprecated the PartMagnet, BoltMagnet does the exact same thing with no bolts assigned.
            Added &quot;Sources.txt&quot; file in ModUpdater folder - enables mods that don&apos;t natively support Mod Loader Pro to have auto updates
            Mods not natively supported by Mod Loader Pro (and have been added into Sources.txt) will have their info downloaded fr [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.mscloadercanvas">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.Sources">
            <summary>
              Looks up a localized string similar to 
            </summary>
        </member>
        <member name="T:MSCLoader.ModSetting">
            <summary>Parent class for settings.</summary>
        </member>
        <member name="M:MSCLoader.ModSetting.SaveSetting(MSCLoader.ModConfig)">
            <summary>Method to save settings into the provided ModConfig.</summary>
            <param name="modConfig">ModConfig to save settings to.</param>
        </member>
        <member name="T:MSCLoader.SettingButton">
            <summary>Main Component for the Button setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingButton.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingButton.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="P:MSCLoader.SettingButton.Name">
            <summary>Setting name, displayed in the settings window. An empty string disables the label.</summary>
        </member>
        <member name="P:MSCLoader.SettingButton.ButtonText">
            <summary>Text on the button itself.</summary>
        </member>
        <member name="P:MSCLoader.SettingButton.OnClick">
            <summary>UI Button's OnClick Eventhandler.</summary>
        </member>
        <member name="F:MSCLoader.SettingButton.suspendActions">
            <summary>Suspends the action calling if true.</summary>
        </member>
        <member name="M:MSCLoader.SettingButton.AddAction(UnityEngine.Events.UnityAction,System.Boolean)">
            <summary>Adds an action that's called whenever the button is clicked.</summary>
            <param name="action">Action to call.</param>
            <param name="ignoreSuspendActions">(Optional) Should the action always be called regardless of other settings? (Not recommended for regular use)</param>
        </member>
        <member name="T:MSCLoader.SettingHeader">
            <summary>Main Component for the Header setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingHeader.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingHeader.Height">
            <summary>The height of the header.</summary>
        </member>
        <member name="P:MSCLoader.SettingHeader.BackgroundColor">
            <summary>The background color for the header.</summary>
        </member>
        <member name="P:MSCLoader.SettingHeader.OutlineColor">
            <summary>The Outline color for the header.</summary>
        </member>
        <member name="P:MSCLoader.SettingHeader.Text">
            <summary>Text displayed on the header.</summary>
        </member>
        <member name="T:MSCLoader.SettingKeybind">
            <summary>Main Component for the Keybind setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingKeybind.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingKeybind.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="P:MSCLoader.SettingKeybind.Name">
            <summary>Setting name, displayed in the settings window.</summary>
        </member>
        <member name="F:MSCLoader.SettingKeybind.PreBind">
            <summary>Event that triggers just after the player have started the keybinding process before pressing any keys.</summary>
        </member>
        <member name="F:MSCLoader.SettingKeybind.PostBind">
            <summary>Event that triggers just after the player have assigned a new binding.</summary>
        </member>
        <member name="F:MSCLoader.SettingKeybind.keybind">
            <summary>Current main key.</summary>
        </member>
        <member name="F:MSCLoader.SettingKeybind.modifiers">
            <summary>Current main modifiers.</summary>
        </member>
        <member name="F:MSCLoader.SettingKeybind.defaultKeybind">
            <summary>Default key.</summary>
        </member>
        <member name="F:MSCLoader.SettingKeybind.defaultModifiers">
            <summary>Default modifiers.</summary>
        </member>
        <member name="M:MSCLoader.SettingKeybind.GetKey">
            <summary>Get if the keybind is held down (including modifiers).</summary>
        </member>
        <member name="M:MSCLoader.SettingKeybind.GetKeyDown">
            <summary>Get if the keybind started being pressed down in the same frame (including modifiers).</summary>
        </member>
        <member name="M:MSCLoader.SettingKeybind.GetKeyUp">
            <summary>Get if the keybind is released in the same frame (including modifiers).</summary>
        </member>
        <member name="M:MSCLoader.SettingKeybind.GetModifiers">
            <summary>Get if the modifiers are pressed down.</summary>
        </member>
        <member name="M:MSCLoader.SettingKeybind.GetModifiersUp">
            <summary>Get if the modifiers were released.</summary>
        </member>
        <member name="M:MSCLoader.SettingKeybind.GetModifiersUpAny">
            <summary>Get if the modifiers were released.</summary>
        </member>
        <member name="M:MSCLoader.SettingKeybind.ResetToDefaults">
            <summary>Reset the setting to default values.</summary>
        </member>
        <member name="T:MSCLoader.SettingRadioButtons">
            <summary>Main Component for the Radio Buttons setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingRadioButtons.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingRadioButtons.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="P:MSCLoader.SettingRadioButtons.Name">
            <summary>Setting name, displayed in the settings window.</summary>
        </member>
        <member name="P:MSCLoader.SettingRadioButtons.Value">
            <summary>Current setting value.</summary>
        </member>
        <member name="P:MSCLoader.SettingRadioButtons.OnValueChanged">
            <summary>Event that triggers whenever the setting changes value.</summary>
        </member>
        <member name="F:MSCLoader.SettingRadioButtons.defaultValue">
            <summary>Default setting value</summary>
        </member>
        <member name="M:MSCLoader.SettingRadioButtons.SetButtonLabelText(System.Int32,System.String)">
            <summary>Set the label text of the button with the specified ID.</summary>
            <param name="id">ID of the button, throws exception if out of bounds.</param>
            <param name="text">Text to display on the label.</param>
        </member>
        <member name="M:MSCLoader.SettingRadioButtons.GetButtonLabelText(System.Int32)">
            <summary>Get the label text of the button with the specified ID.</summary>
            <param name="id">ID of the button, throws exception if out of bounds.</param>
        </member>
        <member name="M:MSCLoader.SettingRadioButtons.AddButton(System.String)">
            <summary>Adds a new button to the RadioButtons setting.</summary>
            <param name="labelText">Text to display on the label of the new button.</param>
            <returns>Created RadioButton.</returns>
        </member>
        <member name="F:MSCLoader.SettingRadioButtons.suspendActions">
            <summary>Suspends the action calling if true.</summary>
        </member>
        <member name="M:MSCLoader.SettingRadioButtons.AddAction(UnityEngine.Events.UnityAction{System.Int32},System.Boolean)">
            <summary>Adds an action that's called whenever the setting's value changes.</summary>
            <param name="action">Action to call.</param>
            <param name="ignoreSuspendActions">(Optional) Should the action always be called regardless of other settings? (Not recommended for regular use)</param>
        </member>
        <member name="M:MSCLoader.SettingRadioButtons.ResetToDefaults">
            <summary>Reset the setting to default values.</summary>
        </member>
        <member name="T:MSCLoader.RadioButton">
            <summary>Component for the buttons in the Radio Buttons setting.</summary>
        </member>
        <member name="F:MSCLoader.RadioButton.settingRadioButtons">
            <summary>Setting the RadioButton belongs to.</summary>
        </member>
        <member name="F:MSCLoader.RadioButton.radioID">
            <summary>ID of the button.</summary>
        </member>
        <member name="T:MSCLoader.SettingSlider">
            <summary>Main Component for the Slider setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.Name">
            <summary>Setting name, displayed in the settings window.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.Value">
            <summary>Current setting value.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.ValueInt">
            <summary>Current setting value as an integer.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.MinValue">
            <summary>Minimum slider value.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.MaxValue">
            <summary>Maximum slider value.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.WholeNumbers">
            <summary>Allow only whole numbers?</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.RoundDigits">
            <summary>How many digits to round the value to.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.OnValueChanged">
            <summary>Event that triggers whenever the slider value is changed.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.ValuePrefix">
            <summary>Prefix for the value text.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.ValueSuffix">
            <summary>Suffix for the value text.</summary>
        </member>
        <member name="P:MSCLoader.SettingSlider.TextValues">
            <summary>Text to be displayed instead of the value, determined by index on the array.</summary>public string[] textValues
        </member>
        <member name="F:MSCLoader.SettingSlider.defaultValue">
            <summary>Default setting value.</summary>
        </member>
        <member name="F:MSCLoader.SettingSlider.suspendActions">
            <summary>Suspend action calling.</summary>
        </member>
        <member name="M:MSCLoader.SettingSlider.AddAction(UnityEngine.Events.UnityAction{System.Single},System.Boolean)">
            <summary>Add an action to the event that triggers whenever the slider changes value.</summary>
        </member>
        <member name="T:MSCLoader.SettingSpacer">
            <summary>Main Component for the Spacer setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingSpacer.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingSpacer.Height">
            <summary>The height of the empty space.</summary>
        </member>
        <member name="T:MSCLoader.SettingText">
            <summary>Main Component for the Text setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingText.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingText.Text">
            <summary>Text displayed in the box of text.</summary>
        </member>
        <member name="P:MSCLoader.SettingText.TextColor">
            <summary>Color of the text.</summary>
        </member>
        <member name="P:MSCLoader.SettingText.BackgroundColor">
            <summary>Background color of the header containing the text.</summary>
        </member>
        <member name="P:MSCLoader.SettingText.OutlineColor">
            <summary>Outline color of the header containing the text.</summary>
        </member>
        <member name="T:MSCLoader.SettingTextBox">
            <summary>Main Component for the TextBox setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.Name">
            <summary>Setting name, displayed in the settings window.</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.Value">
            <summary>Current setting value.</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.Placeholder">
            <summary>Placeholder example text.</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.InputType">
            <summary>What type of characters should be allowed?</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.OnValueChange">
            <summary>Event called whenever a character is typed.</summary>
        </member>
        <member name="P:MSCLoader.SettingTextBox.OnEndEdit">
            <summary>Event called whenever the text box is exited (Pressing Enter, click outside etc.).</summary>
        </member>
        <member name="F:MSCLoader.SettingTextBox.defaultValue">
            <summary>Default setting value.</summary>
        </member>
        <member name="F:MSCLoader.SettingTextBox.suspendActions">
            <summary>Suspend action calling.</summary>
        </member>
        <member name="M:MSCLoader.SettingTextBox.AddOnEndEditAction(UnityEngine.Events.UnityAction{System.String},System.Boolean)">
            <summary>Add an action to the OnEndEdit event.</summary>
        </member>
        <member name="M:MSCLoader.SettingTextBox.AddOnValueChangeAction(UnityEngine.Events.UnityAction{System.String},System.Boolean)">
            <summary>Add an action to the OnValueChange event.</summary>
        </member>
        <member name="T:MSCLoader.SettingToggle">
            <summary>Main Component for the Toggle setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingToggle.Enabled">
            <summary>Should the setting be shown in the Mod Settings list?</summary>
        </member>
        <member name="P:MSCLoader.SettingToggle.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="P:MSCLoader.SettingToggle.Name">
            <summary>Setting name, displayed in the settings window.</summary>
        </member>
        <member name="P:MSCLoader.SettingToggle.Value">
            <summary>Current setting value.</summary>
        </member>
        <member name="P:MSCLoader.SettingToggle.OnValueChanged">
            <summary>Event that triggers whenever the toggle is pressed.</summary>
        </member>
        <member name="F:MSCLoader.SettingToggle.defaultValue">
            <summary>Default setting value.</summary>
        </member>
        <member name="F:MSCLoader.SettingToggle.suspendActions">
            <summary>Suspend action calling.</summary>
        </member>
        <member name="M:MSCLoader.SettingToggle.AddAction(UnityEngine.Events.UnityAction{System.Boolean},System.Boolean)">
            <summary>Add an action to the event that triggers whenever the toggle changes value.</summary>
        </member>
        <member name="T:MSCLoader.SettingBoolean">
            <summary>Main Component for the Boolean setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingBoolean.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="F:MSCLoader.SettingBoolean.Value">
            <summary>Current setting value.</summary>
        </member>
        <member name="T:MSCLoader.SettingNumber">
            <summary>Main Component for the Number setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingNumber.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="F:MSCLoader.SettingNumber.Value">
            <summary>Current setting value.</summary>
        </member>
        <member name="T:MSCLoader.SettingString">
            <summary>Main Component for the String setting type.</summary>
        </member>
        <member name="P:MSCLoader.SettingString.ID">
            <summary>Setting ID. Also determines the containing GameObject's name.</summary>
        </member>
        <member name="F:MSCLoader.SettingString.Value">
            <summary>Current setting value.</summary>
        </member>
        <member name="E:AudioLibrary.MP3_Streaming.ReadFullyStream.StreamTitleChanged">
            <summary>
            Is fired, when a new StreamTitle is received
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.ParseMetaInfo(System.Byte[])">
            <summary>
            Parses the received Meta Info
            </summary>
            <param name="metaInfo"></param>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.OnStreamTitleChanged">
            <summary>
            Fires the StreamTitleChanged event
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.CanRead">
            <summary>
            Gets a value that indicates whether the ShoutcastStream supports reading.
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.CanSeek">
            <summary>
            Gets a value that indicates whether the ShoutcastStream supports seeking.
            This property will always be false.
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.CanWrite">
            <summary>
            Gets a value that indicates whether the ShoutcastStream supports writing.
            This property will always be false.
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Flush">
            <summary>
            Flushes data from the stream.
            This method is currently not supported
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.Length">
            <summary>
            Gets the length of the data available on the Stream.
            This property is not currently supported and always thows a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.Position">
            <summary>
            Gets or sets the current position in the stream.
            This property is not currently supported and always thows a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the ShoutcastStream.
            </summary>
            <param name="buffer">An array of bytes to store the received data from the ShoutcastStream.</param>
            <param name="offset">The location in the buffer to begin storing the data to.</param>
            <param name="count">The number of bytes to read from the ShoutcastStream.</param>
            <returns>The number of bytes read from the ShoutcastStream.</returns>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Close">
            <summary>
            Closes the ShoutcastStream.
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value.
            This Method is not currently supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            This Method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the ShoutcastStream.
            This method is not currently supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.UpperBitrate">
            <summary>
            Gets the encoder's upper bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.NominalBitrate">
            <summary>
            Gets the encoder's nominal bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.LowerBitrate">
            <summary>
            Gets the encoder's lower bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.Vendor">
            <summary>
            Gets the encoder's vendor string for the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.Comments">
            <summary>
            Gets the comments in the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.ContainerOverheadBits">
            <summary>
            Gets the number of bits read that are related to framing and transport alone
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.Stats">
            <summary>
            Gets stats from each decoder stream available
            </summary>
        </member>
    </members>
</doc>
