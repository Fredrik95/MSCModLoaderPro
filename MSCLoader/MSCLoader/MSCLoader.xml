<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSCLoader</name>
    </assembly>
    <members>
        <member name="E:AudioLibrary.MP3_Streaming.ReadFullyStream.StreamTitleChanged">
            <summary>
            Is fired, when a new StreamTitle is received
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.ParseMetaInfo(System.Byte[])">
            <summary>
            Parses the received Meta Info
            </summary>
            <param name="metaInfo"></param>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.OnStreamTitleChanged">
            <summary>
            Fires the StreamTitleChanged event
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.CanRead">
            <summary>
            Gets a value that indicates whether the ShoutcastStream supports reading.
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.CanSeek">
            <summary>
            Gets a value that indicates whether the ShoutcastStream supports seeking.
            This property will always be false.
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.CanWrite">
            <summary>
            Gets a value that indicates whether the ShoutcastStream supports writing.
            This property will always be false.
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Flush">
            <summary>
            Flushes data from the stream.
            This method is currently not supported
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.Length">
            <summary>
            Gets the length of the data available on the Stream.
            This property is not currently supported and always thows a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:AudioLibrary.MP3_Streaming.ReadFullyStream.Position">
            <summary>
            Gets or sets the current position in the stream.
            This property is not currently supported and always thows a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the ShoutcastStream.
            </summary>
            <param name="buffer">An array of bytes to store the received data from the ShoutcastStream.</param>
            <param name="offset">The location in the buffer to begin storing the data to.</param>
            <param name="count">The number of bytes to read from the ShoutcastStream.</param>
            <returns>The number of bytes read from the ShoutcastStream.</returns>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Close">
            <summary>
            Closes the ShoutcastStream.
            </summary>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value.
            This Method is not currently supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            This Method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AudioLibrary.MP3_Streaming.ReadFullyStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the ShoutcastStream.
            This method is not currently supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="T:MSCLoader.Playlists">
            <summary>
            Parse playlists files
            </summary>
        </member>
        <member name="M:MSCLoader.Playlists.plsPlaylist(System.String)">
            <summary>
            Parse *.pls playlist file and return List of paths
            </summary>
            <param name="path">Path to *.pls file</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.plsPlaylist(System.IO.Stream)">
            <summary>
            Parse *.pls playlist file and return List of paths
            </summary>
            <param name="stream">File stream</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.m3uPlaylist(System.String)">
            <summary>
            Parse *.m3u and *.m3u8 playlist files and return List of paths
            </summary>
            <param name="path">Path to .m3u or *.m3u8 file</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="M:MSCLoader.Playlists.m3uPlaylist(System.IO.Stream)">
            <summary>
            Parse *.m3u and *.m3u8 playlist files and return List of paths
            </summary>
            <param name="stream">File stream</param>
            <returns>List of paths to files/urls</returns>
        </member>
        <member name="T:MSCLoader.ModHelper">
            <summary> Container for useful helper methods </summary>
        </member>
        <member name="M:MSCLoader.ModHelper.GetTransform(System.String,System.String)">
            <summary>Get a Transform child.</summary>
            <param name="parentPath">Hierarchy path to a parent Transform.</param>
            <param name="childPath">Hierarchy path from the parent to the wanted child Transform.</param>
            <returns>Transform with specified path.</returns>
        </member>
        <member name="M:MSCLoader.ModHelper.PlaySound3D(UnityEngine.Transform,System.String,System.String,System.Single)">
            <summary>Play a MasterAudio sound from the Transform.</summary>
            <param name="transform">Transform to play the sound from.</param>
            <param name="type">Type of sound.</param>
            <param name="variation">Variation of sound.</param>
            <param name="volume">(Optional) Sound volume.</param>
        </member>
        <member name="M:MSCLoader.ModHelper.PlaySound3D(UnityEngine.Vector3,System.String,System.String,System.Single)">
            <summary>Play a MasterAudio sound from a Vector3 world position.</summary>
            <param name="vector3">Vector3 to play the sound from.</param>
            <param name="type">Type of sound.</param>
            <param name="variation">Variation of sound.</param>
            <param name="volume">(Optional) Sound volume.</param>
        </member>
        <member name="M:MSCLoader.ModHelper.SelectRandom``1(System.Collections.Generic.IList{``0})">
            <summary>Select a random element from a List or an Array.</summary>
            <typeparam name="T">List/Array Element type.</typeparam>
            <param name="list">List/Array to get a random element from.</param>
            <returns></returns>
        </member>
        <member name="M:MSCLoader.ModHelper.InLayerMask(UnityEngine.LayerMask,System.Int32)">
            <summary>Check if a specified layer is in the LayerMask.</summary>
            <param name="layerMask">LayerMask to check.</param>
            <param name="layer">Layer number to check for.</param>
            <returns>Whether or not the layer is in the </returns>
        </member>
        <member name="M:MSCLoader.ModHelper.InLayerMask(UnityEngine.LayerMask,System.String)">
            <summary>Check if a specified layer is in the LayerMask.</summary>
            <param name="layerMask">LayerMask to check.</param>
            <param name="layer">Layer name to check for.</param>
            <returns>Whether or not the layer is in the </returns>
        </member>
        <member name="M:MSCLoader.ModHelper.SetParent(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.String)">
            <summary>Extension of SetParent, with this you can specify the new position, rotation, scale and name of the transform.</summary>
            <param name="transform">Transform to change parent of.</param>
            <param name="parent">New parent Transform.</param>
            <param name="position">New local position.</param>
            <param name="rotation">New local rotation (Euler Angles).</param>
            <param name="scale">New local scale.</param>
            <param name="name">(Optional) New name.</param>
        </member>
        <member name="M:MSCLoader.ModHelper.OpenFolder(System.String)">
            <summary>Open folder in Explorer or file in its default app.</summary>
            <param name="path">Path to folder/file.</param>
        </member>
        <member name="M:MSCLoader.ModHelper.OpenWebsite(System.String)">
            <summary>Open Website URL.</summary>
            <param name="url">Website URL.</param>
        </member>
        <member name="T:MSCLoader.PlayMakerHelper">
            <summary>Container for PlayMaker related helper and extension methods.</summary>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetPlayMakerFSM(UnityEngine.GameObject,System.String)">
            <summary>Get a PlayMakerFSM by name on the GameObject.</summary>
            <param name="gameObject">The GameObject to look for the FSM on.</param>
            <param name="fsmName">Name of the FSM.</param>
            <returns>PlayMakerFSM of specified name, or null if it can't be found.</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetPlayMakerFSM(UnityEngine.Transform,System.String)">
            <summary>Get a PlayMakerFSM by name on the Transform's GameObject.</summary>
            <param name="transform">The Transform to look for the FSM on.</param>
            <param name="fsmName">Name of the FSM.</param>
            <returns>PlayMakerFSM of specified name, or null if it can't be found.</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetState(PlayMakerFSM,System.String)">
            <summary>Get a state on the PlayMakerFSM.</summary>
            <param name="fsm">PlayMakerFSM to search on.</param>
            <param name="stateName">Name of the state to look for.</param>
            <returns>FsmState of specified name.</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetState(PlayMakerFSM,System.Int32)">
            <summary>Get a state on the PlayMakerFSM.</summary>
            <param name="fsm">PlayMakerFSM to search on.</param>
            <param name="stateIndex">Index of the state to look for.</param>
            <returns>FsmState of specified index.</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetAction``1(HutongGames.PlayMaker.FsmState,System.Int32)">
            <summary>Get a PlayMaker FSMStateAction of specified type in the specified state.</summary>
            <typeparam name="T">PlayMaker Action Type, must be of type FSMStateAction or sub-class</typeparam>
            <param name="state">State that contains the action</param>
            <param name="actionIndex">The index of the Actions Array in the FSMState.</param>
            <returns>FSMStateAction of type T</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetAction``1(PlayMakerFSM,System.String,System.Int32)">
            <summary>Get a PlayMaker FSMStateAction of specified type in the specified state.</summary>
            <typeparam name="T">PlayMaker Action Type, must be of type FSMStateAction or sub-class</typeparam>
            <param name="fsm">PlayMakerFSM to get the action from.</param>
            <param name="stateName">Name of the state that contains the action</param>
            <param name="actionIndex">The index of the Actions Array in the FSMState.</param>
            <returns>FSMStateAction of type T</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetAction``1(PlayMakerFSM,System.Int32,System.Int32)">
            <summary>Get a PlayMaker FSMStateAction of specified type in the specified state.</summary>
            <typeparam name="T">PlayMaker Action Type, must be of type FSMStateAction or sub-class</typeparam>
            <param name="fsm">PlayMakerFSM to get the action from.</param>
            <param name="stateIndex">Index of the state that contains the action</param>
            <param name="actionIndex">The index of the Actions Array in the FSMState.</param>
            <returns>FSMStateAction of type T</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.InsertAction(HutongGames.PlayMaker.FsmState,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Insert an action into the state.</summary>
            <param name="state">State to insert the action to.</param>
            <param name="actionIndex">The index the action should be inserted to.</param>
            <param name="action">The action that will be inserted.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.InsertAction(PlayMakerFSM,System.String,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Insert an action into the state.</summary>
            <param name="fsm">PlayMakerFSM to insert the action to.</param>
            <param name="stateName">Name of the state to insert the action to.</param>
            <param name="actionIndex">The index the action should be inserted to.</param>
            <param name="action">The action that will be inserted.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.InsertAction(PlayMakerFSM,System.Int32,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Insert an action into the state.</summary>
            <param name="fsm">PlayMakerFSM to insert the action to.</param>
            <param name="stateIndex">Index of the state to insert the action to.</param>
            <param name="actionIndex">The index the action should be inserted to.</param>
            <param name="action">The action that will be inserted.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.AddAction(HutongGames.PlayMaker.FsmState,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Add an action the state.</summary>
            <param name="state">State to add the action to.</param>
            <param name="action">The action that will be added.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.AddAction(PlayMakerFSM,System.String,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Add an action the state.</summary>
            <param name="fsm">PlayMakerFSM to add the action to.</param>
            <param name="stateName">Name of the state to add the action to</param>
            <param name="action">The action that will be added.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.AddAction(PlayMakerFSM,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Add an action the state.</summary>
            <param name="fsm">PlayMakerFSM to add the action to.</param>
            <param name="stateIndex">Index of the state to add the action to</param>
            <param name="action">The action that will be added.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.ReplaceAction(HutongGames.PlayMaker.FsmState,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Replaces an action in the specified state.</summary>
            <param name="state">State to replace the action in.</param>
            <param name="actionIndex">Index of the action to replace.</param>
            <param name="action">The replacement action.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.ReplaceAction(PlayMakerFSM,System.String,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Replaces an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to replace the action on.</param>
            <param name="stateName">Name of the state to replace the action in.</param>
            <param name="actionIndex">Index of the action to replace.</param>
            <param name="action">The replacement action.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.ReplaceAction(PlayMakerFSM,System.Int32,System.Int32,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Replaces an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to replace the action on.</param>
            <param name="stateIndex">Index of the state to replace the action in.</param>
            <param name="actionIndex">Index of the action to replace.</param>
            <param name="action">The replacement action.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.RemoveAction(HutongGames.PlayMaker.FsmState,System.Int32)">
            <summary>Removes an action in the specified state.</summary>
            <param name="state">State to remove the action in.</param>
            <param name="actionIndex">Index of the action to remove.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.RemoveAction(HutongGames.PlayMaker.FsmState,HutongGames.PlayMaker.FsmStateAction)">
            <summary>Removes an action in the specified state.</summary>
            <param name="state">State to remove the action in.</param>
            <param name="action">Action to remove.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.RemoveAction(PlayMakerFSM,System.String,System.Int32)">
            <summary>Removes an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to remove an action on.</param>
            <param name="stateName">Name of the state to remove the action in.</param>
            <param name="actionIndex">Index of the action to remove.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.RemoveAction(PlayMakerFSM,System.Int32,System.Int32)">
            <summary>Removes an action in the specified state.</summary>
            <param name="fsm">PlayMakerFSM to remove an action on.</param>
            <param name="stateIndex">Index of the state to remove the action in.</param>
            <param name="actionIndex">Index of the action to remove.</param>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetVariable``1(PlayMakerFSM,System.String)">
            <summary>Get a variable of specified type and name.</summary>
            <typeparam name="T">Type of variable to get. NamedVariable or sub-class (Standard PlayMaker Variable types)</typeparam>
            <param name="fsm">PlayMakerFSM that contains the variable.</param>
            <param name="name">Name of the variable to find.</param>
            <returns>PlayMaker variable of specified type T</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.GetGlobalVariable``1(System.String)">
            <summary>Get a global PlayMaker variable of specified type and name.</summary>
            <typeparam name="T">Type of variable to get. NamedVariable or sub-class (Standard PlayMaker Variable types)</typeparam>
            <param name="name">Name of the variable to find.</param>
            <returns>PlayMaker variable of specified type T</returns>
        </member>
        <member name="M:MSCLoader.PlayMakerHelper.FindVariable``1(HutongGames.PlayMaker.FsmVariables,System.String)">
            <summary>Get a variable of specified type and name.</summary>
            <typeparam name="T">Type of variable to get. NamedVariable or sub-class (Standard PlayMaker Variable types)</typeparam>
            <param name="variables">Variables to search.</param>
            <param name="name">Name of the variable to find.</param>
            <returns>PlayMaker variable of specified type T</returns>
        </member>
        <member name="T:MSCLoader.CallAction">
            <summary>FsmStateAction that executes an Action.</summary>
        </member>
        <member name="M:MSCLoader.CallAction.#ctor(System.Action)">
            <summary>Create a new FsmStateAction that executes provided Action.</summary>
            <param name="action">Action to call when state executes the FsmStateAction.</param>
        </member>
        <member name="T:MSCLoader.Mod">
            <summary> Main Mod Class, parent class for all mods. </summary>
        </member>
        <member name="P:MSCLoader.Mod.isDisabled">
            <summary> Get the mods disabled state. </summary>
        </member>
        <member name="P:MSCLoader.Mod.ID">
            <summary> The mod's ID, used for identification. Has to be unique! </summary>
        </member>
        <member name="P:MSCLoader.Mod.Name">
            <summary> The mod's name, shown in lists etc. </summary>
        </member>
        <member name="P:MSCLoader.Mod.Author">
            <summary> Who made the mod? You, presumably! </summary>
        </member>
        <member name="P:MSCLoader.Mod.Version">
            <summary> Contains the mod version. </summary>
        </member>
        <member name="P:MSCLoader.Mod.Description">
            <summary> A short description of your mod. Displayed in the settings window for the mod, hidden if empty. </summary>
        </member>
        <member name="P:MSCLoader.Mod.Icon">
            <summary> Icon displayed in the mod list, preferably square and not larger than 256x256. </summary>
        </member>
        <member name="P:MSCLoader.Mod.UpdateLink">
            <summary> A link from which ModLoader will check for updates. Must be GitHub or NexusMods. Ex.: https://github.com/Athlon007/MOP</summary>
        </member>
        <member name="F:MSCLoader.Mod.modListElement">
            <summary> The mod list element for the mod. </summary>
        </member>
        <member name="F:MSCLoader.Mod.modSettings">
            <summary> The settings container for the mod. Used when adding settings. </summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettings">
            <summary> Method for adding settings to the mod. Order of execution: 1 </summary>
        </member>
        <member name="M:MSCLoader.Mod.ModSettingsLoaded">
            <summary> Method called when all mods have had their ModSettings() called. Order of execution: 2 </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnMenuLoad">
            <summary> Load Method for anything involving the menu scene. Order of execution: 3 </summary>
        </member>
        <member name="M:MSCLoader.Mod.MenuUpdate">
            <summary> Update Method for the menu scene. Order of execution: Every frame in menu </summary>
        </member>
        <member name="M:MSCLoader.Mod.MenuOnGUI">
            <summary> OnGUI Method for the menu scene. Order of execution: Every GUI frame </summary>
        </member>
        <member name="M:MSCLoader.Mod.MenuFixedUpdate">
            <summary> FixedUpdate Method for the menu scene. Order of execution: Every fixed time step </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnNewGame">
            <summary> Method executed when the player starts a new game, use cases include removing old save files. Order of execution: 4 </summary>
        </member>
        <member name="M:MSCLoader.Mod.PreLoad">
            <summary> Method executed one frame after the game scene loads. Order of execution: 5 </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnLoad">
            <summary> Method executed just when the game has completely finished loading. Order of execution: 6 </summary>
        </member>
        <member name="M:MSCLoader.Mod.PostLoad">
            <summary> Method executed after every mod has executed OnLoad(). Order of execution: 7 </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnSave">
            <summary> Method executed when the player saves the game. Order of execution: 8 </summary>
        </member>
        <member name="M:MSCLoader.Mod.OnGUI">
            <summary> OnGUI method for the game scene. Order of execution: Every GUI frame </summary>
        </member>
        <member name="M:MSCLoader.Mod.Update">
            <summary> Update method for the game scene. Order of execution: Every frame </summary>
        </member>
        <member name="M:MSCLoader.Mod.FixedUpdate">
            <summary> FixedUpdate method for the game scene. Order of execution: Every fixed time step </summary>
        </member>
        <member name="T:MSCLoader.ModConsole">
            <summary>The handler for the ModConsole</summary>
        </member>
        <member name="P:MSCLoader.ModConsole.IsOpen">
            <summary>Returns if the console is open or not.</summary>
        </member>
        <member name="M:MSCLoader.ModConsole.Log(System.String)">
            <summary>Logs a string to the ModConsole and output_log.txt.</summary>
            <param name="text">Message to log.</param>
        </member>
        <member name="M:MSCLoader.ModConsole.Log(System.Object)">
            <summary>Logs anything to the ModConsole and output_log.txt.</summary>
            <param name="obj">object to log.</param>
        </member>
        <member name="M:MSCLoader.ModConsole.Log(System.Collections.IList,System.Boolean)">
            <summary>Logs a list (and optionally its elements) to the ModConsole and output_log.txt</summary>
            <param name="list">List to print.</param>
            <param name="printAllElements">(Optional) Should it log all elements of the list/array or should it only log the list/array itself. (default: true)</param>
        </member>
        <member name="M:MSCLoader.ModConsole.LogError(System.String)">
            <summary>Logs a string as an error to the ModConsole and output_log.txt. (Depending on user settings, this might auto-open the console)</summary>
            <param name="text">Message to error log.</param>
        </member>
        <member name="M:MSCLoader.ModConsole.LogWarning(System.String)">
            <summary>Logs a string as a warning to the ModConsole and output_log.txt. (Depending on user settings, this might auto-open the console)</summary>
            <param name="text">Message to warning log.</param>
        </member>
        <member name="T:MSCLoader.CurrentScene">
            <summary> Enumeration of the game's scenes.</summary>
        </member>
        <member name="T:MSCLoader.ModLoader">
            <summary></summary>
        </member>
        <member name="F:MSCLoader.ModLoader.Version">
            <summary> Current Mod Loader Version. </summary>
        </member>
        <member name="P:MSCLoader.ModLoader.LoadedMods">
            <summary> List of Loaded Mods. </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.ModMethods">
            <summary> List of used Mod Class methods. </summary>
        </member>
        <member name="F:MSCLoader.ModLoader.modSceneLoadHandler">
            <summary>Load handler for the UI. Add your GameObject to the extra list if you want your UI to be disabled when the game loads a scene.</summary>
        </member>
        <member name="P:MSCLoader.ModLoader.CurrentScene">
            <summary> Get the current game scene. </summary>
        </member>
        <member name="M:MSCLoader.ModLoader.GetModSettingsFolder(MSCLoader.Mod,System.Boolean)">
            <summary>Get the settings folder path for a specific mod.</summary>
            <param name="mod">The mod you want to get the settings folder path for.</param>
            <param name="create">(Optional) Should the folder be created if it doesn't exist?</param>
        </member>
        <member name="M:MSCLoader.ModLoader.GetModAssetsFolder(MSCLoader.Mod)">
            <summary>Get the asset folder for a specific mod.</summary>
        </member>
        <member name="M:MSCLoader.ModLoader.IsModPresent(System.String)">
            <summary>Check if the specified mod ID is loaded and isn't disabled.</summary>
            <param name="ModID">ID of the mod.</param>
        </member>
        <member name="T:MSCLoader.ModUI">
            <summary>Contains methods and variables suitable for controlling UI.</summary>
        </member>
        <member name="M:MSCLoader.ModUI.GetCanvas">
            <summary>Get the mod loader canvas GameObject.</summary>
            <returns>Returns the mod loader canvas GameObject.</returns>
        </member>
        <member name="F:MSCLoader.ModUI.MSCYellow">
            <summary>Yellow Color that MSC uses.</summary>
        </member>
        <member name="F:MSCLoader.ModUI.MSCRed">
            <summary>Wine Red Color that MSC uses.</summary>
        </member>
        <member name="F:MSCLoader.ModUI.MSCRose">
            <summary>Rose Color that MSC uses.</summary>
        </member>
        <member name="F:MSCLoader.ModUI.ModDisabledRed">
            <summary>Red Color for disabled mods.</summary>
        </member>
        <member name="M:MSCLoader.ModUI.CreatePrompt(System.String,System.String,UnityEngine.Events.UnityAction)">
            <summary> Creates a prompt with "OK" button. </summary>
            <param name="message">A message that will appear in the prompt.</param>
            <param name="title">Title of the prompt.</param>
            <param name="onPromptClose">(Optional) Action that will happen after the window gets closed - regardless of player's choice.</param>
            <returns>Returns a ModPrompt component of the button. Can be</returns>
        </member>
        <member name="M:MSCLoader.ModUI.CreateYesNoPrompt(System.String,System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction)">
            <summary> Creates a prompt with "Yes" and "No" buttons. </summary>
            <param name="message">A message that will appear in the prompt.</param>
            <param name="title">Title of the prompt.</param>
            <param name="onYes">Action that will happen after player clicks Yes button.</param>
            <param name="onNo">(Optional) Action that will happen after player clicks No button.</param>
            <param name="onPromptClose">(Optional) Action that will happen after the window gets closed - regardless of player's choice.</param>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="M:MSCLoader.ModUI.CreateRetryCancelPrompt(System.String,System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction)">
            <summary>Creates a prompt with "Retry" and "Cancel" buttons.</summary>
            <param name="message">A message that will appear in the prompt.</param>
            <param name="title">Title of the prompt.</param>
            <param name="onRetry">Action that will happen after player clicks Retry button.</param>
            <param name="onCancel">(Optional) Action that will happen after player clicks Cancel button.</param>
            <param name="onPromptClose">(Optional) Action that will happen after the window gets closed - regardless of player's choice.</param>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="M:MSCLoader.ModUI.CreateCustomPrompt(System.String,System.String)">
            <summary>
            Creates a prompt that can be fully customized. You can add any buttons you like.<br></br>
            Custom prompts have to be showed manually using <b>ModPrompt.Show()</b>!
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <returns>Returns a ModPrompt component of the button.</returns>
        </member>
        <member name="M:MSCLoader.ModUpdater.LookForUpdates">
            <summary> Starts looking for the update of the specific mod. </summary>
        </member>
        <member name="M:MSCLoader.ModUpdater.CheckForModUpdates(System.Collections.Generic.List{MSCLoader.Mod})">
            <summary> Goes through all mods and checks if an update on GitHub or Nexus is available for them. </summary>
        </member>
        <member name="T:MSCLoader.ModUpdateData">
            <summary> Stores the info about mod update found. </summary>
        </member>
        <member name="T:MSCLoader.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MSCLoader.Properties.Resources.mscloadercanvas">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.UpperBitrate">
            <summary>
            Gets the encoder's upper bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.NominalBitrate">
            <summary>
            Gets the encoder's nominal bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.LowerBitrate">
            <summary>
            Gets the encoder's lower bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.Vendor">
            <summary>
            Gets the encoder's vendor string for the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.Comments">
            <summary>
            Gets the comments in the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.ContainerOverheadBits">
            <summary>
            Gets the number of bits read that are related to framing and transport alone
            </summary>
        </member>
        <member name="P:NAudio.Vorbis.VorbisWaveReader.Stats">
            <summary>
            Gets stats from each decoder stream available
            </summary>
        </member>
    </members>
</doc>
